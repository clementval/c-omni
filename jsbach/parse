#!/bin/bash

#
# This scripts helps to test the parsing of the full JSBACH
# code by the OMNI Compiler.
#

function show_help(){
  echo "$0 [-s] [-p] [--with-omni]"
  echo ""
  echo "Options:"
  echo " -s                Skip CLAW/OMNI compilation/install"
  echo " -p                Skip parsing step"
  echo " -o                Use the latest OMNI Compiler version for the test"
}

source ./common/utility.sh
source ./common/omni.lib.sh

# CLAW repository variables
CLAW_BRANCH="master"
CLAW_MAIN_REPO="https://github.com/claw-project/claw-compiler.git"
CLAW_REPO=${CLAW_MAIN_REPO}
CLAWFC=./claw/bin/clawfc

# Working directories for the test
TEST_DIR=${PWD}/build
TEST_NAME="jsbach"
CLAW_OUTPUT="./processed/${TEST_NAME}"
XMOD_DIR="./xmods/${TEST_NAME}"

# Default compiler used
BASE_COMPILER="gnu"

# Option switches
SKIP_CLAW=false
SKIP_PARSING=false
OMNI_LATEST=false

# JSBACH related variables
JSBACH_GIT_REPO="git@git.mpimet.mpg.de:jsbach.git"
JSBACH_GIT_BRANCH="jsbach-4.20p8"
JSBACH_GIT_HASH="ae915ba9ed54eef82c39b91a93d70b9e15cf61dd"
JSBACH_REP="jsbach"
JSBACH_SRC="./${JSBACH_REP}/pp"
JSBACH_START="jsb4_driver_dsl4jsb.f90"
STANDALONE_DEP="dependencies_jsbach"
EXTERNAL_XMODS="../jsbach/external_xmods"

# Preprocessor macros definition
JSBACH_DEFINITIONS="-D__ICON__"

# Parsing output
PARSING_OUTPUT=${TEST_DIR}/jsbach_parse_test.log

while getopts "hspo" opt; do
  case "$opt" in
  h)
    show_help
    exit 0
    ;;
  s) SKIP_CLAW=true;;
  p) SKIP_PARSING=true;;
  o) OMNI_LATEST=true;;
  *) show_help
     exit 1
     ;;
  esac
done

if [[ ${OMNI_LATEST} == true ]] && [[ ${SKIP_CLAW} == true ]]; then
  echo "Incompatible options -o and -s ..."
  exit 1
fi

COMPUTER=$(hostname)
if [[ ${COMPUTER} == *"kesch"* ]]; then
  COMPUTER="kesch"
fi

# Try to load machine specific compiler information
COMPILER_FILE="./compiler/${COMPUTER}.${BASE_COMPILER}.sh"
if [ -f ${COMPILER_FILE} ]; then
  # shellcheck source=./compiler/clementon2.gnu.sh
  source ${COMPILER_FILE}
else
  echo "Warning: Compiler file ${COMPILER_FILE} missing. Default values are used."
fi


echo ""
echo "======================================="
echo "JSBACH -> CLAW/OMNI Compiler parse test"
echo "======================================="
echo "- JSBACH information"
echo "  - Git repository: ${JSBACH_GIT_REPO}"
echo "  - Git branch: ${JSBACH_GIT_BRANCH}"
echo "  - Git hash: ${JSBACH_GIT_HASH}"

if [[ ${SKIP_CLAW} == false ]]; then
  # Specific CLAW/OMNI information
  echo "- CLAW Compiler information:"
  echo "  - Git repository: ${CLAW_REPO}"
  echo "  - Git branch: ${CLAW_BRANCH}"
  echo "  - Base compiler: ${BASE_COMPILER}"
  echo "  - Target directory: ${TEST_DIR}"

  rm -rf "${TEST_DIR}"
  mkdir "${TEST_DIR}"

  ###############################
  # 1. CLAW FORTRAN Compiler step
  ###############################

  echo ">>> CLAW FORTRAN COMPILER STEP: Clone and compile"
  if [[ ${OMNI_LATEST} == true ]]; then
    ./common/compile.claw -d "${TEST_DIR}" -c "${BASE_COMPILER}" -r "${CLAW_REPO}" -b "${CLAW_BRANCH}" -o
  else
    ./common/compile.claw -d "${TEST_DIR}" -c "${BASE_COMPILER}" -r "${CLAW_REPO}" -b "${CLAW_BRANCH}"
  fi
else
  rm -rf "${TEST_DIR:?}"/${JSBACH_REP}
fi

echo "============================================"
echo ""


cd "${TEST_DIR}" || exit 1
WORKING_DIR="${PWD}"

# Get git hashes for the log
cd claw-compiler || exit 1
CLAW_GIT_HASH=$(git rev-parse HEAD)
cd omni-compiler || exit 1
OMNI_GIT_HASH=$(git rev-parse HEAD)
cd "${WORKING_DIR}" || exit 1


if [[ ${SKIP_PARSING} == false ]]; then
  {
    echo "JSBACH PARSING TESTS"
    echo "--------------------"
    echo "Git version information:"
    echo "- CLAW git version: ${CLAW_GIT_HASH}"
    echo "- OMNI git version: ${OMNI_GIT_HASH}"
  } > "${PARSING_OUTPUT}"

  ######################
  # 2. JSBACH clone step
  ######################

  git clone -b ${JSBACH_GIT_BRANCH} ${JSBACH_GIT_REPO}
  mkdir -p ${JSBACH_SRC}
  cd ${JSBACH_REP} || exit 1
  git checkout ${JSBACH_GIT_HASH}
  JSBACH_HASH=$(git rev-parse HEAD)
  echo "- JSBACH git version: ${JSBACH_HASH}" >> "${PARSING_OUTPUT}"
  cd "${WORKING_DIR}" || exit 1

  ####################
  # 2. JSBACH dsl
  ####################

  ${JSBACH_REP}/scripts/dsl4jsb/dsl4jsb.py -p _dsl4jsb -d ${JSBACH_REP}/src -t ${JSBACH_SRC}

  ####################
  # 3. Dependency step
  ####################

  # Generate the dependency list for the parsing order
  status "Generate dependencies list"
  echo "../fdependencies/generate_dep.py --recursive ${JSBACH_SRC} ${JSBACH_START} > ${STANDALONE_DEP} 2> ${STANDALONE_DEP}.out" > "${PARSING_OUTPUT}"
  ../fdependencies/generate_dep.py --recursive ${JSBACH_SRC} ${JSBACH_START} > ${STANDALONE_DEP} 2> ${STANDALONE_DEP}.out

  # Check existence of the dependencies file
  if [[ ! -f ${STANDALONE_DEP} ]]; then
    echo "ERROR: ${STANDALONE_DEP} does not exists!"
    exit 1
  fi

  # Check that dependencies file has information in it
  if [[ $(wc -l < ${STANDALONE_DEP}) -lt 2 ]]; then
    echo "ERROR: ${STANDALONE_DEP} is empty!"
    exit 1
  fi


  #################
  # 4. Parsing step
  #################

  # Check existence of the CLAW FORTRAN Compiler
  if [[ ! -f ${CLAWFC} ]]; then
    echo "ERROR: ${CLAWFC} does not exists!"
    exit 1
  fi

  mkdir -p ${XMOD_DIR}
  mkdir -p ${CLAW_OUTPUT}

  parsed_files=0
  total_files=$(wc -l < ${STANDALONE_DEP})
  echo ">>> Parsing files ${total_files}"
  echo "" >> "${PARSING_OUTPUT}"
  echo "Parsing files:" >> "${PARSING_OUTPUT}"
  while IFS= read -r f90_file; do
    (( current_file_nb=parsed_files+1 ))
    echo "    Processing file [$current_file_nb] ${JSBACH_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}"
    echo "    Processing file ${JSBACH_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}" >> "${PARSING_OUTPUT}"
    echo "cmd: ${CLAWFC} ${JSBACH_DEFINITIONS} --no-dep --debug-omni -J ${XMOD_DIR} -J ${EXTERNAL_XMODS} --force -I ${INCLUDE_MPI} -o ${CLAW_OUTPUT}/${f90_file} ${JSBACH_SRC}${f90_file}" >> "${PARSING_OUTPUT}" 2>&1
    mkdir -p "$(dirname "${CLAW_OUTPUT}"/"${f90_file}")"
    ${CLAWFC} "${JSBACH_DEFINITIONS}" --no-dep --debug-omni -J ${XMOD_DIR} -J ${EXTERNAL_XMODS} --force -I "${INCLUDE_MPI}" -o "${CLAW_OUTPUT}"/"${f90_file}" "${JSBACH_SRC}""${f90_file}" >> "${PARSING_OUTPUT}" 2>&1
    (( parsed_files=parsed_files+1 ))
    if [[ ! -f ${CLAW_OUTPUT}/${f90_file} ]]; then
      error "${JSBACH_SRC}""${f90_file}"
    fi
  done < ./${STANDALONE_DEP}
fi


#################
# 5. Control step
#################

# Control if present .xmod file has been produced correctly
omni::check_xmod ${XMOD_DIR} xmod_errors

# Control output fortran file any corruption
omni::check_fortran ${STANDALONE_DEP} ${CLAW_OUTPUT} f90_errors

echo ""
echo "================================"
echo "JSBACH full parsing test results"
echo "================================"

# shellcheck disable=SC2154
if [[ ${xmod_errors} -ne 0 ]] || [[ ${f90_errors} -ne 0 ]]; then
  # Check potential known errors in log file
  omni::check_error_log "${PARSING_OUTPUT}"
  error "Parsing test has detected some errors."
  exit 1
else
  status "SUCCESS Test has be executed correctly."
  echo "================================"
  exit 0
fi
